{"title":"Object Oriented Programming and Classes","markdown":{"yaml":{"title":"Object Oriented Programming and Classes"},"headingText":"Creating and Using a Class","containsRefs":false,"markdown":"\n\n\n\n\n\n\n<table align=\"left\">\n  <td>\n    <a href=\"https://colab.research.google.com/github/phonchi/nsysu-math105A/blob/master/static_files/presentations/03_Basic_structure.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n  </td>\n  <td>\n    <a target=\"_blank\" href=\"https://kaggle.com/kernels/welcome?src=https://github.com/phonchi/nsysu-math105A/blob/master/static_files/presentations/03_Basic_structure.ipynb\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" /></a>\n  </td>\n</table>\n\nIn the first lecture, we have mentioned that everything in Python is an object, so you’ve been using objects constantly. ***Object Oriented Programming (OOP)*** is a programming paradigm that allows you to group variables and functions together into new data types, called ***classes***, from which you can create ***objects***. When you write a class, you define the general behavior that a whole category of objects can have.\n\nWhen you create individual objects from the class, each object is automatically equipped with the general behavior; you can then give each \nobject whatever unique traits you desire. Making an object from a class is called ***instantiation***, and you work with instances of a class. In this chapter you’ll specify the kind of information that can be stored in instances, and you’ll define actions that can be taken with these instances. You’ll also write classes that extend the functionality of existing classes, so similar classes can share common functionality, and you can do more with less code. You’ll store your classes in modules and import classes written by other programmers into your own program files.\n\nYou’ve already used lots of classes created by other people (`int`, `str`, `float`, `list`, `dict`, etc). In this chapter you’ll learn how to create your own custom classes.\n\n> Learning about OOP will help you see the world as a programmer does. Knowing the logic behind classes will train you to think logically, so you can write programs that effectively address almost any problem you encounter.\n\n\nYou can model almost anything using classes. Let’s start by writing a simple class, Dog, that represents a dog—not one dog in particular, but any dog. What do we know about most pet dogs? Well, they all have a name and an age. We also know that most dogs sit and roll over. Those two pieces of information  (name and age) and those two behaviors (sit and roll over) will go in our `Dog` class because they’re common to most dogs. \n\n#### Creating the Dog Class\n\nEach instance created from the Dog class will store a `name` and an `age`, and we’ll give each dog the ability to `sit()` and `roll_over()`:\n\nWe first define a class called `Dog`. By convention, capitalized names refer to classes in Python. There are no parentheses in the class definition because we’re creating this class from scratch. We then write a docstring describing what this class does.\n\n#### The `__init__()` Method\n\nA function that’s part of a class is a ***method***. Everything you learned about functions applies to methods as well; the only practical difference for now is the way we’ll call methods. The `__init__()` method is a special method that Python runs automatically whenever we create a new instance based on the `Dog` class. This method has two leading underscores and two trailing underscores, a convention that helps prevent Python’s default method names from conflicting with your method names. \n\nWe define the `__init__()` method to have three parameters: `self`, `name`, and `age`. The `self` parameter is required in the method definition, and it must come first, before the other parameters. It must be included in the definition because when Python calls this method later (to create an instance of Dog), the method call will automatically pass the `self` argument. **Every method call associated with an instance automatically passes `self`, which is a reference to the instance itself; it gives the individual instance access to the attributes and methods in the class.** When we make an instance of `Dog`, Python will call the `__init__()` method from the `Dog` class. We’ll pass `Dog()` a name and an age as arguments; `self` is passed automatically, so we don’t need to pass it. The two variables defined in the body of the `__init__()` method each have the prefix `self`. Any variable prefixed with `self` is available to every method in the class, and we’ll also be able to access these variables through any instance created from the class. The line `self.name = name` takes the value associated with the parameter `name` and assigns it to the variable `name`, which is then attached to the instance being created. The same process happens with `self.age = age`. Variables that are accessible through instances like this are called ***attributes***.\n\nThe Dog class has two other methods defined: `sit()` and `roll_over()`. Because these methods don’t need additional information to run, we just \ndefine them to have one parameter, `self`. The instances we create later will have access to these methods. In other words, they’ll be able to sit and roll over.\n\n#### Making an Instance from a Class\n\nHere, we tell Python to create a dog whose name is 'Willie' and whose age is 6 which is known as ***constructor expression***. When Python reads this line, it calls the `__init__()` method in `Dog` with the arguments 'Willie' and 6. The `__init__()` method creates an instance representing this particular dog and sets the `name` and `age` attributes using the values we provided. Python then returns an instance representing this dog. We assign that instance to the variable `my_dog`. To access the attributes of an instance, you use dot notation. After we create an instance from the class `Dog`, we can use dot notation to call any method defined in `Dog`. \n\nTo call a method, give the name of the instance (in this case, `my_dog`) and the method you want to call, separated by a dot agian.\n\n#### Creating Multiple Instances\n\nIn this example we create a dog named Willie and a dog named Lucy. Each dog is a separate instance with its own set of attributes, capable of the \nsame set of actions.\n\n### Working with Classes and Instances\n\nOnce you write a class, you’ll spend most of your time working with instances created from that class. One of the first tasks you’ll want to do is modify the attributes associated with a particular instance. You can modify the attributes of an instance directly or write methods that update attributes in specific ways.\n\n#### The `Car` Class\n\nIn the `Car` class, we define the `__init__()` method with the `self` parameter first, just like we did with the `Dog` class. We also give it three other parameters: `make`, `model`, and `year`. The `__init__()` method takes in these parameters and assigns them to the attributes that will be associated with instances made from this class. When we make a new `Car` instance, we’ll need to specify a `make`, `model`, and `year` for our instance. We define a method called `get_descriptive_name()` that puts a car’s `year`, `make`, and `model` into one string neatly describing the car. To work with the attribute values in this method, we use `self.make`, `self.model`, and `self.year`. \n\nWhen an instance is created, attributes can be defined without being passed in as parameters. These attributes can be defined in the `__init__()` \nmethod, where they are assigned a default value. In the above example, an attribute called `odometer_reading` that always starts with a value of 0. Finally, there is a method `read_odometer()` that helps us read each car’s odometer.\n\nOutside of the class, we make an instance from the `Car` class and assign it to the variable `my_new_car`. Then we call `get_descriptive_name()` to show what kind of car we have! Our car starts with a mileage of 0:\n\nNot many cars are sold with exactly 0 miles on the odometer, so we need a way to change the value of this attribute.\n\n#### Modifying Attribute Values\n\nYou can change an attribute’s value in three ways: you can change the value directly through an instance, set the value through a method, or increment the value (add a certain amount to it) through a method. The simplest way to modify the value of an attribute is to access the attribute directly through an instance. \n\nIt can be helpful to have methods that update certain attributes for you. Instead of accessing the attribute directly, you pass the new value to a \nmethod that handles the updating internally.\n\nThe only modification to Car is the addition of `update_odometer()`. This method takes in a mileage value and assigns it to `self.odometer_reading`. It also checks that the new reading makes sense before modifying the attribute. If the value provided for mileage is greater than or equal to the existing mileage, self.odometer_reading, you can update the odometer reading to the new mileage. If the new mileage is less than the existing mileage, you’ll get a warning that you can’t roll back an odometer! In addition, we also define new method `increment_odometer()` takes in a number of miles, and adds this value to `self.odometer_reading`. Finally, a method `fill_gas_tank()` is also added to the class.\n\n> You can use methods like this to control how users of your program update values such as an odometer reading, but anyone with access to the program can still set the odometer reading to any value by accessing the attribute directly. Effective security takes extreme attention to detail in addition to basic checks like those shown here.\n\n#### `__repr__` and `__str__` method\n\nNotice that when you evalueate the `my_new_car` it will return a message that returns the address of the object:\n\nYou can change this behavior by adding a special function `__repr__`:\n\nThe Python documentation indicates that `__repr__` returns the “official” string representation of the object. we also define the `__str__` special method. This method is called implicitly when you convert an object to a string with the built-in function `str()`, such as when you print an object or call `str()` explicitly.\n\n\n\n### Inheritance\n\nYou don’t always have to start from scratch when writing a class. If the class you’re writing is a specialized version of another class you wrote, you can use ***inheritance*** which is call ***\"is a\" releationship***. When one class inherits from another, it takes on the attributes and methods of the first class. The original class is called the ***parent class***, and the new class is the ***child class***. The child class can inherit any or all of the attributes and methods of its parent class, but it’s also free to define new attributes and methods of its own.\n\n#### The `__init__()` Method for a Child Class\n\nWhen you’re writing a new class based on an existing class, you’ll often want to call the `__init__()` method from the parent class. This will initialize any attributes that were defined in the parent `__init__()` method and make them available in the child class. As an example, let’s model an electric car. An electric car is just a specific kind of car, so we can base our new `ElectricCar` class on the `Car` class we wrote earlier. Then we’ll only have to write code for the attributes and behaviors specific to electric cars.\n\nWhen you create a child class, the parent class must be part of the current file and must appear before the child class in the file. We then define the child class, `ElectricCar`. The name of the parent class must be included in parentheses in the definition of a child class. The `__init__()` method takes in the information required to make a `Car` instance. **The `super()` function is a special function that allows you to call a method from the parent class.** This line tells Python to call the `__init__()` method from `Car`, which gives an `ElectricCar` instance all the attributes \ndefined in that method. The name super comes from a convention of calling the parent class a ***superclass (base class)*** and the child class a ***subclass (derived class)***. We make an instance of the `ElectricCar` class and assign it to `my_leaf`.  \n'leaf', and 2024.\n\nWe also add new attribute that is specific to electric cars (a battery) and a method to report on this attribute. We’ll store the battery size and write a method that prints a description of the battery. This attribute/method will be associated with all instances created from the \n`ElectricCar` class but won’t be associated with any instances of `Car`.\n\nWhen we need to know the type of an object, we can pass the object to the built-in `type()` function. But if we’re doing a type check of an object, it’s a better idea to use the more flexible `isinstance()` built-in function. The `isinstance()` function will return `True` if the object is of the given class or a subclass of the given class.\n\n#### Overriding Methods from the Parent Class\n\nYou can override any method from the parent class that doesn’t fit what you’re trying to model with the child class. To do this, you define a method in the child class with the same name as the method you want to override in the parent class. Say the class Car had a method called `fill_gas_tank()`. This method is meaningless for an all-electric vehicle, so you might want to override this method. Here’s one way to do that:\n\nNow if someone tries to call `fill_gas_tank()` with an electric car, Python will ignore the method `fill_gas_tank()` in `Car` and run this code instead. \n\n> When you use inheritance, you can make your child classes retain what you need and override anything you don’t need from the parent class.\n\n#### Instances as Attributes\n\nWhen modeling something from the real world in code, you may find that you’re adding more and more detail to a class. You’ll find that you have a \ngrowing list of attributes and methods and that your files are becoming lengthy. In these situations, you might recognize that part of one class can \nbe written as a separate class. You can break your large class into smaller classes that work together; this approach is called ***composition*** which is sometimes referred to as the ***\"has a\" releationship***.\n\nFor example, if we continue adding detail to the `ElectricCar` class, we might notice that we’re adding many attributes and methods specific to \nthe car’s battery. When we see this happening, we can stop and move those attributes and methods to a separate class called `Battery`. Then we can use a `Battery` instance as an attribute in the `ElectricCar` class:\n\nWe define a new class called `Battery` that doesn’t inherit from any other class. The `__init__()` method has one parameter, `battery_size`, in addition to `self`. This is an optional parameter that sets the battery’s size to 40 if no value is provided. The method `describe_battery()` has been moved to this class as well. A new method `get_range()` performs some simple analysis is also added. If the battery’s capacity is 40 kWh, `get_range()` sets the range to 150 miles, and if the capacity is 65 kWh, it sets the range to 225 miles.\n\nIn the `ElectricCar` class, we now add an attribute called `self.battery`. This tells Python to create a new instance of `Battery` (with a default size of 40) and assign that instance to the attribute `self.battery`. Any `ElectricCar` instance will now have a `Battery` instance created automatically. We create an electric car and assign it to the variable `my_leaf`. When we want to describe the battery, we need to work through the car’s battery attribute:\n\n### Encapsulation - Properties for data access\n\nMost object-oriented programming languages enable you to ***encapsulate*** (or hide) an object’s data from the code. Such data in these languages is said to be ***private data***. Python does not have private data. Instead, you use naming conventions to design classes that encourage correct use. By convention, **Python programmers know that any attribute name beginning with an underscore (`_`) is for a class’s internal use only.** Code should\nuse the class’s methods and the class’s properties to interact with each object’s internal-use data attributes. Attributes whose identifiers do not\nbegin with an underscore (`_`) are considered publicly accessible for use.\n\n> However, even when we use these conventions, attributes are always accessible.\n\nLet’s develop a `Time` class that stores the time in 24-hour clock format with hours in the range 0–23, and minutes and seconds each in the range 0–59. For this class, we’ll provide ***properties***, which look like data attributes but control the manner in which they get and modify an object’s data.\n\nClass `Time`’s `__init__` method specifies `hour`, `minute` and `second` parameters, each with a default argument of 0. The statements containing\n`self.hour`, `self.minute` and `self.second` appear to create hour, minute and second attributes for the new `Time` object. However, these statements actually call methods that implement the class’s `hour`, `minute` and `second` properties (lines 13–47). Those methods then create attributes named `_hour`, `_minute` and `_second` that are meant for use only inside the class!\n\nLines 10–21 define a publicly accessible read-write property named `hour` that manipulates a data attribute named `_hour`. The single-leading-underscore (_) naming convention indicates that we should not access `_hour` directly. Properties look like data attributes to programmers working with `Time` objects. However, notice that properties are implemented as methods. Each property defines a **getter** method which gets (that is, returns) a data attribute’s value and can optionally define a **setter** method which sets a data attribute’s value. \n\nThe `@property` decorator precedes the property’s getter method, which receives only a `self` parameter. Behind the scenes, a decorator adds code to the decorated function — in this case to make the hour function work with attribute syntax. The getter method’s name is the property name. This getter method returns the `_hour` data attribute’s value. The following code expression invokes the getter method:\n\nA decorator of the form `@property_name.setter` (in this case, `@hour.setter`) precedes the property’s setter method. The method receives two parameters — `self` and a parameter `hour` representing the value being assigned to the property. If the `hour` parameter’s value is valid, this method assigns it to the self object’s `_hour` attribute; otherwise, the method raises a `ValueError`. The following code expression invokes the setter by assigning a value to the property: \n\n A read-write property has both a getter and a setter. A readonly property has only a getter. We provide method `set_time` as a convenient way to change all three attributes with a single method call. Lines 49–53 invoke the setters for the hour, minute and second properties.\n\nClass `Time`’s properties and methods define the class’s public interface—that is, the set of properties and methods programmers should use to interact with objects of the class. Just like private attribute, not all methods need to serve as part of a class’s interface. Some serve as ***utility methods*** used only inside the class and are not intended to be part of the class’s public interface used by others. Such methods should be named with a single leading underscore. In other object-oriented languages like C++, Java and C#, such methods typically are implemented\nas ***private methods***.\n\n#### Simulating “Private” Attributes \n\nIn programming languages such as C++, Java and C#, classes state explicitly which class members are publicly accessible. Class members that may not be accessed outside a class definition are private and visible only within the class that defines them. Python programmers often use “private” attributes for data or utility methods that are essential to a class’s inner workings but are not part of the class’s public interface.\n\nRather than `_hour`, we can name the attribute `__hour` with two leading underscores. This convention indicates that `__hour` is “private” and should not be accessible to the class’s clients. \n\nwhen we attempt to access `__private_data` directly, we get an `AttributeError` indicating that the class does not have an attribute by that name:\n\n>  Even with double-underscore (__) naming, we can still access and modify `__private_data`, because we know that Python renames attributes simply by prefixing their names with  '`_ClassName`'\n\n### Class Methods\n\n***Class methods*** are associated with a class rather than with individual objects, like regular methods are. You can recognize a class method in code when you see two markers: the `@classmethod` decorator before the method’s `def` statement and the use of `cls` as the first parameter, as shown in the following example.\n\nThe `cls` parameter acts like `self` except `self` refers to an object, but the `cls` parameter refers to an object’s class. **This means that the code in a class method cannot access an individual object’s attributes or call an object’s regular methods**. Class methods can only call other class methods or access class attributes. We use the name `cls` because `class` is a Python keyword, and just like other keywords, such as `if`, `while`, or `import`, we can’t use it for parameter names. We often call class attributes through the class object, as in `ExampleClass`.`exampleClassMethod()`. But we can also call them through any object of the class, as in `obj.exampleClassMethod()`.\n\nClass methods aren’t commonly used. The most frequent use case is to provide alternative constructor methods besides `__init__()`. For example, what if a constructor function could accept either a string of data the new object needs or a string of a filename that contains the data the new object needs? We don’t want the list of the `__init__()` method’s parameters to be lengthy and confusing. Instead let’s use class methods to return a new object. For example, let’s create an `AsciiArt` class.\n\nThe AsciiArt class has an `__init__()` method that can be passed the text characters of the image as a string. It also has a `fromFile()` class method that can be passed the filename string of a text file containing the ASCII art. Both methods create `AsciiArt` objects.\n\n#### Class Attributes\n\nA class attribute is a variable that belongs to the class rather than to an object. We create class attributes inside the class but outside all methods, just like we can create global variables in a .py file but outside all functions. Here’s an example of a class attribute named `count`, which keeps track of how many `CreateCounter` objects have been created:\n\nThe `CreateCounter` class has a single class attribute named `count`. All `CreateCounter` objects share this attribute rather than having their own separate `count` attributes. This is why the `CreateCounter.count += 1` line in the constructor function can keep count of every `CreateCounter` object created. \n\n#### Static Methods\n\nA ***static method*** doesn’t have a `self` or `cls` parameter. Static methods are effectively just functions, because they can’t access the attributes or methods of the class or its objects. Rarely, if ever, do you need to use static methods in Python. If you do decide to use one, you should strongly consider just creating a regular function instead.\n\nWe define static methods by placing the `@staticmethod` decorator before their `def` statements. Here is an example of a static method.\n\n> Static methods are more common in other languages that don’t have Python’s flexible language features. Python’s inclusion of static methods imitates the features of other languages but doesn’t offer much practical value.\n\nYou’ll rarely need class methods, class attributes, and static methods. They’re also prone to overuse. If you’re thinking, “Why can’t I just use a function or global variable instead?” this is a hint that you probably don’t need to use a class method, class attribute, or static method. The only reason we cover them is so you can recognize them when you encounter them in code.\n\n### Polymorphism\n\nPolymorphism allows objects of one type to be treated as objects of another type. For example, the `len()` function returns the length of the argument passed to it. You can pass a string to `len()` to see how many characters it has, but you can also pass a list or dictionary to `len()` to see how many items or key-value pairs it has, respectively. This form of polymorphism is called ***generic functions*** or parametric polymorphism, because it can handle objects of many different types. Polymorphism also refers to ad hoc polymorphism or ***operator overloading***, where operators (such as `+` or `*`) can have different behavior based on the type of objects they’re operating on. For example, the `+` operator does mathematical addition when operating on two integer or float values, but it does string concatenation when operating on two strings.\n\nIn Python, we can achieve method polymorphism by defining a method in a base class and then overriding it in the derived classes. Each derived class can then provide its own implementation of the method. For example:\n\nIn this example, the `Animal` class defines the speak method as a pass statement, meaning it does nothing. However, both `Dog` and `Cat` classes override the method with their own implementation of the method. The `speak()` function accepts any object that implements the `speak()` method, meaning it can handle animals of different types. Here, we can pass both `Dog` and `Cat` objects to the `speak()` function, as they both inherit the `speak()` method from the `Animal` class.\n\n#### Operator overloading\n\nPython has several special method names that begin and end with double underscores, abbreviated as ***dunder***. These methods are called dunder methods, special methods, or magic methods. You’re already familiar with the `__init__()` dunder method name, but Python has several more. We often use them for operator overloading — that is, adding custom behaviors that allow us to use objects of our classes with Python operators, such as `+` or `>=`. Other dunder methods let objects of our classes work with Python’s built-in functions, such as `len()`. These methods are documented online in the official Python documentation at https://docs.python.org/3/reference/datamodel.html#special-method-names.\n\nIn this example, we define the `__add__` method in the `Point` class to implement the addition of two `Point` objects. When we use the `+` operator with two `Point` objects, the `__add__` method is called automatically to perform the addition.\n\n### Data Class\n\nData classes are among Python 3.7’s most important new features. They help you build classes faster by using more concise notation and by autogenerating “boilerplate” code that’s common in most classes. For instance, \n\n- A data class autogenerates `__init__`, `__repr__` and `__eq__`, saving you time.\n- A data class can autogenerate the special methods that overload the `<`, `<=`, `>` and `>=` comparison operators.\n- When you change data attributes defined in a data class, then use it in a script or interactive session, the autogenerated code updates automatically. So, you have less code to maintain and debug.\n- The required variable annotations for class attributes and data attributes enable you to take advantage of static code analysis tools. So, you might be able to eliminate additional errors before they can occur at execution time. \n- Some static code analysis tools and IDEs can inspect variable annotations and issue warnings if your code uses the wrong type. This can help you locate logic errors in your code before you execute it. In an end-of-chapter exercise, we ask you to use the static code analysis tool MyPy to demonstrate such warnings. \n\nCheckout https://docs.python.org/3/library/dataclasses.html for more details.\n\n\n","srcMarkdownNoYaml":"\n\n\n\n\n\n\n<table align=\"left\">\n  <td>\n    <a href=\"https://colab.research.google.com/github/phonchi/nsysu-math105A/blob/master/static_files/presentations/03_Basic_structure.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n  </td>\n  <td>\n    <a target=\"_blank\" href=\"https://kaggle.com/kernels/welcome?src=https://github.com/phonchi/nsysu-math105A/blob/master/static_files/presentations/03_Basic_structure.ipynb\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" /></a>\n  </td>\n</table>\n\nIn the first lecture, we have mentioned that everything in Python is an object, so you’ve been using objects constantly. ***Object Oriented Programming (OOP)*** is a programming paradigm that allows you to group variables and functions together into new data types, called ***classes***, from which you can create ***objects***. When you write a class, you define the general behavior that a whole category of objects can have.\n\nWhen you create individual objects from the class, each object is automatically equipped with the general behavior; you can then give each \nobject whatever unique traits you desire. Making an object from a class is called ***instantiation***, and you work with instances of a class. In this chapter you’ll specify the kind of information that can be stored in instances, and you’ll define actions that can be taken with these instances. You’ll also write classes that extend the functionality of existing classes, so similar classes can share common functionality, and you can do more with less code. You’ll store your classes in modules and import classes written by other programmers into your own program files.\n\nYou’ve already used lots of classes created by other people (`int`, `str`, `float`, `list`, `dict`, etc). In this chapter you’ll learn how to create your own custom classes.\n\n> Learning about OOP will help you see the world as a programmer does. Knowing the logic behind classes will train you to think logically, so you can write programs that effectively address almost any problem you encounter.\n\n## Creating and Using a Class\n\nYou can model almost anything using classes. Let’s start by writing a simple class, Dog, that represents a dog—not one dog in particular, but any dog. What do we know about most pet dogs? Well, they all have a name and an age. We also know that most dogs sit and roll over. Those two pieces of information  (name and age) and those two behaviors (sit and roll over) will go in our `Dog` class because they’re common to most dogs. \n\n#### Creating the Dog Class\n\nEach instance created from the Dog class will store a `name` and an `age`, and we’ll give each dog the ability to `sit()` and `roll_over()`:\n\nWe first define a class called `Dog`. By convention, capitalized names refer to classes in Python. There are no parentheses in the class definition because we’re creating this class from scratch. We then write a docstring describing what this class does.\n\n#### The `__init__()` Method\n\nA function that’s part of a class is a ***method***. Everything you learned about functions applies to methods as well; the only practical difference for now is the way we’ll call methods. The `__init__()` method is a special method that Python runs automatically whenever we create a new instance based on the `Dog` class. This method has two leading underscores and two trailing underscores, a convention that helps prevent Python’s default method names from conflicting with your method names. \n\nWe define the `__init__()` method to have three parameters: `self`, `name`, and `age`. The `self` parameter is required in the method definition, and it must come first, before the other parameters. It must be included in the definition because when Python calls this method later (to create an instance of Dog), the method call will automatically pass the `self` argument. **Every method call associated with an instance automatically passes `self`, which is a reference to the instance itself; it gives the individual instance access to the attributes and methods in the class.** When we make an instance of `Dog`, Python will call the `__init__()` method from the `Dog` class. We’ll pass `Dog()` a name and an age as arguments; `self` is passed automatically, so we don’t need to pass it. The two variables defined in the body of the `__init__()` method each have the prefix `self`. Any variable prefixed with `self` is available to every method in the class, and we’ll also be able to access these variables through any instance created from the class. The line `self.name = name` takes the value associated with the parameter `name` and assigns it to the variable `name`, which is then attached to the instance being created. The same process happens with `self.age = age`. Variables that are accessible through instances like this are called ***attributes***.\n\nThe Dog class has two other methods defined: `sit()` and `roll_over()`. Because these methods don’t need additional information to run, we just \ndefine them to have one parameter, `self`. The instances we create later will have access to these methods. In other words, they’ll be able to sit and roll over.\n\n#### Making an Instance from a Class\n\nHere, we tell Python to create a dog whose name is 'Willie' and whose age is 6 which is known as ***constructor expression***. When Python reads this line, it calls the `__init__()` method in `Dog` with the arguments 'Willie' and 6. The `__init__()` method creates an instance representing this particular dog and sets the `name` and `age` attributes using the values we provided. Python then returns an instance representing this dog. We assign that instance to the variable `my_dog`. To access the attributes of an instance, you use dot notation. After we create an instance from the class `Dog`, we can use dot notation to call any method defined in `Dog`. \n\nTo call a method, give the name of the instance (in this case, `my_dog`) and the method you want to call, separated by a dot agian.\n\n#### Creating Multiple Instances\n\nIn this example we create a dog named Willie and a dog named Lucy. Each dog is a separate instance with its own set of attributes, capable of the \nsame set of actions.\n\n### Working with Classes and Instances\n\nOnce you write a class, you’ll spend most of your time working with instances created from that class. One of the first tasks you’ll want to do is modify the attributes associated with a particular instance. You can modify the attributes of an instance directly or write methods that update attributes in specific ways.\n\n#### The `Car` Class\n\nIn the `Car` class, we define the `__init__()` method with the `self` parameter first, just like we did with the `Dog` class. We also give it three other parameters: `make`, `model`, and `year`. The `__init__()` method takes in these parameters and assigns them to the attributes that will be associated with instances made from this class. When we make a new `Car` instance, we’ll need to specify a `make`, `model`, and `year` for our instance. We define a method called `get_descriptive_name()` that puts a car’s `year`, `make`, and `model` into one string neatly describing the car. To work with the attribute values in this method, we use `self.make`, `self.model`, and `self.year`. \n\nWhen an instance is created, attributes can be defined without being passed in as parameters. These attributes can be defined in the `__init__()` \nmethod, where they are assigned a default value. In the above example, an attribute called `odometer_reading` that always starts with a value of 0. Finally, there is a method `read_odometer()` that helps us read each car’s odometer.\n\nOutside of the class, we make an instance from the `Car` class and assign it to the variable `my_new_car`. Then we call `get_descriptive_name()` to show what kind of car we have! Our car starts with a mileage of 0:\n\nNot many cars are sold with exactly 0 miles on the odometer, so we need a way to change the value of this attribute.\n\n#### Modifying Attribute Values\n\nYou can change an attribute’s value in three ways: you can change the value directly through an instance, set the value through a method, or increment the value (add a certain amount to it) through a method. The simplest way to modify the value of an attribute is to access the attribute directly through an instance. \n\nIt can be helpful to have methods that update certain attributes for you. Instead of accessing the attribute directly, you pass the new value to a \nmethod that handles the updating internally.\n\nThe only modification to Car is the addition of `update_odometer()`. This method takes in a mileage value and assigns it to `self.odometer_reading`. It also checks that the new reading makes sense before modifying the attribute. If the value provided for mileage is greater than or equal to the existing mileage, self.odometer_reading, you can update the odometer reading to the new mileage. If the new mileage is less than the existing mileage, you’ll get a warning that you can’t roll back an odometer! In addition, we also define new method `increment_odometer()` takes in a number of miles, and adds this value to `self.odometer_reading`. Finally, a method `fill_gas_tank()` is also added to the class.\n\n> You can use methods like this to control how users of your program update values such as an odometer reading, but anyone with access to the program can still set the odometer reading to any value by accessing the attribute directly. Effective security takes extreme attention to detail in addition to basic checks like those shown here.\n\n#### `__repr__` and `__str__` method\n\nNotice that when you evalueate the `my_new_car` it will return a message that returns the address of the object:\n\nYou can change this behavior by adding a special function `__repr__`:\n\nThe Python documentation indicates that `__repr__` returns the “official” string representation of the object. we also define the `__str__` special method. This method is called implicitly when you convert an object to a string with the built-in function `str()`, such as when you print an object or call `str()` explicitly.\n\n\n\n### Inheritance\n\nYou don’t always have to start from scratch when writing a class. If the class you’re writing is a specialized version of another class you wrote, you can use ***inheritance*** which is call ***\"is a\" releationship***. When one class inherits from another, it takes on the attributes and methods of the first class. The original class is called the ***parent class***, and the new class is the ***child class***. The child class can inherit any or all of the attributes and methods of its parent class, but it’s also free to define new attributes and methods of its own.\n\n#### The `__init__()` Method for a Child Class\n\nWhen you’re writing a new class based on an existing class, you’ll often want to call the `__init__()` method from the parent class. This will initialize any attributes that were defined in the parent `__init__()` method and make them available in the child class. As an example, let’s model an electric car. An electric car is just a specific kind of car, so we can base our new `ElectricCar` class on the `Car` class we wrote earlier. Then we’ll only have to write code for the attributes and behaviors specific to electric cars.\n\nWhen you create a child class, the parent class must be part of the current file and must appear before the child class in the file. We then define the child class, `ElectricCar`. The name of the parent class must be included in parentheses in the definition of a child class. The `__init__()` method takes in the information required to make a `Car` instance. **The `super()` function is a special function that allows you to call a method from the parent class.** This line tells Python to call the `__init__()` method from `Car`, which gives an `ElectricCar` instance all the attributes \ndefined in that method. The name super comes from a convention of calling the parent class a ***superclass (base class)*** and the child class a ***subclass (derived class)***. We make an instance of the `ElectricCar` class and assign it to `my_leaf`.  \n'leaf', and 2024.\n\nWe also add new attribute that is specific to electric cars (a battery) and a method to report on this attribute. We’ll store the battery size and write a method that prints a description of the battery. This attribute/method will be associated with all instances created from the \n`ElectricCar` class but won’t be associated with any instances of `Car`.\n\nWhen we need to know the type of an object, we can pass the object to the built-in `type()` function. But if we’re doing a type check of an object, it’s a better idea to use the more flexible `isinstance()` built-in function. The `isinstance()` function will return `True` if the object is of the given class or a subclass of the given class.\n\n#### Overriding Methods from the Parent Class\n\nYou can override any method from the parent class that doesn’t fit what you’re trying to model with the child class. To do this, you define a method in the child class with the same name as the method you want to override in the parent class. Say the class Car had a method called `fill_gas_tank()`. This method is meaningless for an all-electric vehicle, so you might want to override this method. Here’s one way to do that:\n\nNow if someone tries to call `fill_gas_tank()` with an electric car, Python will ignore the method `fill_gas_tank()` in `Car` and run this code instead. \n\n> When you use inheritance, you can make your child classes retain what you need and override anything you don’t need from the parent class.\n\n#### Instances as Attributes\n\nWhen modeling something from the real world in code, you may find that you’re adding more and more detail to a class. You’ll find that you have a \ngrowing list of attributes and methods and that your files are becoming lengthy. In these situations, you might recognize that part of one class can \nbe written as a separate class. You can break your large class into smaller classes that work together; this approach is called ***composition*** which is sometimes referred to as the ***\"has a\" releationship***.\n\nFor example, if we continue adding detail to the `ElectricCar` class, we might notice that we’re adding many attributes and methods specific to \nthe car’s battery. When we see this happening, we can stop and move those attributes and methods to a separate class called `Battery`. Then we can use a `Battery` instance as an attribute in the `ElectricCar` class:\n\nWe define a new class called `Battery` that doesn’t inherit from any other class. The `__init__()` method has one parameter, `battery_size`, in addition to `self`. This is an optional parameter that sets the battery’s size to 40 if no value is provided. The method `describe_battery()` has been moved to this class as well. A new method `get_range()` performs some simple analysis is also added. If the battery’s capacity is 40 kWh, `get_range()` sets the range to 150 miles, and if the capacity is 65 kWh, it sets the range to 225 miles.\n\nIn the `ElectricCar` class, we now add an attribute called `self.battery`. This tells Python to create a new instance of `Battery` (with a default size of 40) and assign that instance to the attribute `self.battery`. Any `ElectricCar` instance will now have a `Battery` instance created automatically. We create an electric car and assign it to the variable `my_leaf`. When we want to describe the battery, we need to work through the car’s battery attribute:\n\n### Encapsulation - Properties for data access\n\nMost object-oriented programming languages enable you to ***encapsulate*** (or hide) an object’s data from the code. Such data in these languages is said to be ***private data***. Python does not have private data. Instead, you use naming conventions to design classes that encourage correct use. By convention, **Python programmers know that any attribute name beginning with an underscore (`_`) is for a class’s internal use only.** Code should\nuse the class’s methods and the class’s properties to interact with each object’s internal-use data attributes. Attributes whose identifiers do not\nbegin with an underscore (`_`) are considered publicly accessible for use.\n\n> However, even when we use these conventions, attributes are always accessible.\n\nLet’s develop a `Time` class that stores the time in 24-hour clock format with hours in the range 0–23, and minutes and seconds each in the range 0–59. For this class, we’ll provide ***properties***, which look like data attributes but control the manner in which they get and modify an object’s data.\n\nClass `Time`’s `__init__` method specifies `hour`, `minute` and `second` parameters, each with a default argument of 0. The statements containing\n`self.hour`, `self.minute` and `self.second` appear to create hour, minute and second attributes for the new `Time` object. However, these statements actually call methods that implement the class’s `hour`, `minute` and `second` properties (lines 13–47). Those methods then create attributes named `_hour`, `_minute` and `_second` that are meant for use only inside the class!\n\nLines 10–21 define a publicly accessible read-write property named `hour` that manipulates a data attribute named `_hour`. The single-leading-underscore (_) naming convention indicates that we should not access `_hour` directly. Properties look like data attributes to programmers working with `Time` objects. However, notice that properties are implemented as methods. Each property defines a **getter** method which gets (that is, returns) a data attribute’s value and can optionally define a **setter** method which sets a data attribute’s value. \n\nThe `@property` decorator precedes the property’s getter method, which receives only a `self` parameter. Behind the scenes, a decorator adds code to the decorated function — in this case to make the hour function work with attribute syntax. The getter method’s name is the property name. This getter method returns the `_hour` data attribute’s value. The following code expression invokes the getter method:\n\nA decorator of the form `@property_name.setter` (in this case, `@hour.setter`) precedes the property’s setter method. The method receives two parameters — `self` and a parameter `hour` representing the value being assigned to the property. If the `hour` parameter’s value is valid, this method assigns it to the self object’s `_hour` attribute; otherwise, the method raises a `ValueError`. The following code expression invokes the setter by assigning a value to the property: \n\n A read-write property has both a getter and a setter. A readonly property has only a getter. We provide method `set_time` as a convenient way to change all three attributes with a single method call. Lines 49–53 invoke the setters for the hour, minute and second properties.\n\nClass `Time`’s properties and methods define the class’s public interface—that is, the set of properties and methods programmers should use to interact with objects of the class. Just like private attribute, not all methods need to serve as part of a class’s interface. Some serve as ***utility methods*** used only inside the class and are not intended to be part of the class’s public interface used by others. Such methods should be named with a single leading underscore. In other object-oriented languages like C++, Java and C#, such methods typically are implemented\nas ***private methods***.\n\n#### Simulating “Private” Attributes \n\nIn programming languages such as C++, Java and C#, classes state explicitly which class members are publicly accessible. Class members that may not be accessed outside a class definition are private and visible only within the class that defines them. Python programmers often use “private” attributes for data or utility methods that are essential to a class’s inner workings but are not part of the class’s public interface.\n\nRather than `_hour`, we can name the attribute `__hour` with two leading underscores. This convention indicates that `__hour` is “private” and should not be accessible to the class’s clients. \n\nwhen we attempt to access `__private_data` directly, we get an `AttributeError` indicating that the class does not have an attribute by that name:\n\n>  Even with double-underscore (__) naming, we can still access and modify `__private_data`, because we know that Python renames attributes simply by prefixing their names with  '`_ClassName`'\n\n### Class Methods\n\n***Class methods*** are associated with a class rather than with individual objects, like regular methods are. You can recognize a class method in code when you see two markers: the `@classmethod` decorator before the method’s `def` statement and the use of `cls` as the first parameter, as shown in the following example.\n\nThe `cls` parameter acts like `self` except `self` refers to an object, but the `cls` parameter refers to an object’s class. **This means that the code in a class method cannot access an individual object’s attributes or call an object’s regular methods**. Class methods can only call other class methods or access class attributes. We use the name `cls` because `class` is a Python keyword, and just like other keywords, such as `if`, `while`, or `import`, we can’t use it for parameter names. We often call class attributes through the class object, as in `ExampleClass`.`exampleClassMethod()`. But we can also call them through any object of the class, as in `obj.exampleClassMethod()`.\n\nClass methods aren’t commonly used. The most frequent use case is to provide alternative constructor methods besides `__init__()`. For example, what if a constructor function could accept either a string of data the new object needs or a string of a filename that contains the data the new object needs? We don’t want the list of the `__init__()` method’s parameters to be lengthy and confusing. Instead let’s use class methods to return a new object. For example, let’s create an `AsciiArt` class.\n\nThe AsciiArt class has an `__init__()` method that can be passed the text characters of the image as a string. It also has a `fromFile()` class method that can be passed the filename string of a text file containing the ASCII art. Both methods create `AsciiArt` objects.\n\n#### Class Attributes\n\nA class attribute is a variable that belongs to the class rather than to an object. We create class attributes inside the class but outside all methods, just like we can create global variables in a .py file but outside all functions. Here’s an example of a class attribute named `count`, which keeps track of how many `CreateCounter` objects have been created:\n\nThe `CreateCounter` class has a single class attribute named `count`. All `CreateCounter` objects share this attribute rather than having their own separate `count` attributes. This is why the `CreateCounter.count += 1` line in the constructor function can keep count of every `CreateCounter` object created. \n\n#### Static Methods\n\nA ***static method*** doesn’t have a `self` or `cls` parameter. Static methods are effectively just functions, because they can’t access the attributes or methods of the class or its objects. Rarely, if ever, do you need to use static methods in Python. If you do decide to use one, you should strongly consider just creating a regular function instead.\n\nWe define static methods by placing the `@staticmethod` decorator before their `def` statements. Here is an example of a static method.\n\n> Static methods are more common in other languages that don’t have Python’s flexible language features. Python’s inclusion of static methods imitates the features of other languages but doesn’t offer much practical value.\n\nYou’ll rarely need class methods, class attributes, and static methods. They’re also prone to overuse. If you’re thinking, “Why can’t I just use a function or global variable instead?” this is a hint that you probably don’t need to use a class method, class attribute, or static method. The only reason we cover them is so you can recognize them when you encounter them in code.\n\n### Polymorphism\n\nPolymorphism allows objects of one type to be treated as objects of another type. For example, the `len()` function returns the length of the argument passed to it. You can pass a string to `len()` to see how many characters it has, but you can also pass a list or dictionary to `len()` to see how many items or key-value pairs it has, respectively. This form of polymorphism is called ***generic functions*** or parametric polymorphism, because it can handle objects of many different types. Polymorphism also refers to ad hoc polymorphism or ***operator overloading***, where operators (such as `+` or `*`) can have different behavior based on the type of objects they’re operating on. For example, the `+` operator does mathematical addition when operating on two integer or float values, but it does string concatenation when operating on two strings.\n\nIn Python, we can achieve method polymorphism by defining a method in a base class and then overriding it in the derived classes. Each derived class can then provide its own implementation of the method. For example:\n\nIn this example, the `Animal` class defines the speak method as a pass statement, meaning it does nothing. However, both `Dog` and `Cat` classes override the method with their own implementation of the method. The `speak()` function accepts any object that implements the `speak()` method, meaning it can handle animals of different types. Here, we can pass both `Dog` and `Cat` objects to the `speak()` function, as they both inherit the `speak()` method from the `Animal` class.\n\n#### Operator overloading\n\nPython has several special method names that begin and end with double underscores, abbreviated as ***dunder***. These methods are called dunder methods, special methods, or magic methods. You’re already familiar with the `__init__()` dunder method name, but Python has several more. We often use them for operator overloading — that is, adding custom behaviors that allow us to use objects of our classes with Python operators, such as `+` or `>=`. Other dunder methods let objects of our classes work with Python’s built-in functions, such as `len()`. These methods are documented online in the official Python documentation at https://docs.python.org/3/reference/datamodel.html#special-method-names.\n\nIn this example, we define the `__add__` method in the `Point` class to implement the addition of two `Point` objects. When we use the `+` operator with two `Point` objects, the `__add__` method is called automatically to perform the addition.\n\n### Data Class\n\nData classes are among Python 3.7’s most important new features. They help you build classes faster by using more concise notation and by autogenerating “boilerplate” code that’s common in most classes. For instance, \n\n- A data class autogenerates `__init__`, `__repr__` and `__eq__`, saving you time.\n- A data class can autogenerate the special methods that overload the `<`, `<=`, `>` and `>=` comparison operators.\n- When you change data attributes defined in a data class, then use it in a script or interactive session, the autogenerated code updates automatically. So, you have less code to maintain and debug.\n- The required variable annotations for class attributes and data attributes enable you to take advantage of static code analysis tools. So, you might be able to eliminate additional errors before they can occur at execution time. \n- Some static code analysis tools and IDEs can inspect variable annotations and issue warnings if your code uses the wrong type. This can help you locate logic errors in your code before you execute it. In an end-of-chapter exercise, we ask you to use the static code analysis tool MyPy to demonstrate such warnings. \n\nCheckout https://docs.python.org/3/library/dataclasses.html for more details.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"08_09_OOP.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.306","book":{"page-navigation":true,"title":"mybook","author":"phonchi","date":"02/17/2023","chapters":["index.qmd","01_Python.ipynb","02_Flow_control.ipynb","03_Function.ipynb","04_Lists_tuples.ipynb","05_Dictionaries_sets.ipynb","06_Manipulating_string.ipynb","07_Files.ipynb"],"search":{"location":"navbar","type":"overlay"}},"theme":"cosmo","title":"Object Oriented Programming and Classes"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}