{"title":"Dictionaries","markdown":{"yaml":{"title":"Dictionaries"},"headingText":"Dictionaries","containsRefs":false,"markdown":"\n\n\n\n\n\n\n<table align=\"left\">\n  <td>\n    <a href=\"https://colab.research.google.com/github/phonchi/nsysu-math105A/blob/master/static_files/presentations/03_Basic_structure.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n  </td>\n  <td>\n    <a target=\"_blank\" href=\"https://kaggle.com/kernels/welcome?src=https://github.com/phonchi/nsysu-math105A/blob/master/static_files/presentations/03_Basic_structure.ipynb\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" /></a>\n  </td>\n</table>\n\nIn this chapter, we will cover the dictionary data type, which provides a flexible way to access and organize data.\n\nhttps://github.com/topics/python4beginner\n\nhttps://github.com/milaan9/92_Python_Games/blob/main/002_Tic_Tac_Toe_with_AI/001_Tic_Tac_Toe_with_AI.ipynb\n\nhttps://github.com/grantjenks/free-python-games\n\nhttps://github.com/asweigart/PythonStdioGames\n\n\nA *dictionary* is like a list, but more general. In a list, the index positions have to be integers; in a dictionary, the indices can be (almost) any type.\n\nYou can think of a dictionary as a mapping between a set of indices (which are called ***keys***) and a set of ***values***. Each key maps to a value. The association of a key and a value is called a `key-value` pair or sometimes an item.\n\n<center><img src=\"https://favtutor.com/resources/images/uploads/mceu_93797887411635500429275.png\"></center>\n<div align=\"center\"> source: https://favtutor.com/blogs/list-vs-dictionary </div>\n\n> As of Python 3.7, dictionary items maintain the order at which they are inserted into the dictionary.\n\nAs an example, we’ll build a dictionary that maps from subjects to grade, so the keys are string while the values are integers. The function `dict` creates a new dictionary with no items. \n\nTo add items to the dictionary, you can use square brackets:\n\nYou can\tstore them using separate lists for\tsubjects and scores but the following update and maintain will becomes tedius\n\nYou can now use the keys to look up the corresponding values:\n\nNote that you can’t access items in them using integer indexes like `grade[0]`. (Consider the case when you use 4, 2, 1, 0 as the keys). Therefore, you can't use slice for dictionaries either. \n\nTrying to access a key that does not exist in a dictionary will result in a `KeyError` error message, much like a list’s “out-of-range” `IndexError` error message.\n\nTo add or delete an entry, it is similar to list\n\n### The `keys()`, `values()`, and `items()` Methods\n\nThere are three dictionary methods that will return list-like values of the dictionary’s keys, values, or both keys and values: `keys()`, `values()`, and `items()`. The values returned by these methods are not true lists but these data types (dict_keys, dict_values, and dict_items, respectively) can be used in for loops!\n\nHere, a `for` loop iterates over each of the values in the `grade` dictionary. A `for` loop can also iterate over the keys:\n\nIf you want to retrieve all the keys and values as a true list, you can use the `keys()` and `values()` method available in dictionary objects with `list()`\n\nDictionaries have a method called `items()` that returns a list of tuples, where each tuple is a key-value pair:\n\nCombining `items()`, multiple assignment, and `for`, you can see a nice code pattern for traversing the keys and values of a dictionary in a single loop:\n\n### > Exercise 3: Try to write a function that calculates the weighted average of the input dictionary\n\n#### Checking Whether a Key or Value Exists in a Dictionary\n\nRecall from the previous chapter that the `in` and `not in` operators can check whether a value exists in a list. You can also use these operators to see whether a certain key or value exists in a dictionary\n\nIn the previous example, notice that 'calculus' in `grade` is essentially a shorter version of writing 'calculus' in `grade.keys()`.\n\n#### The `get()` Method\n\nIt’s tedious to check whether a key exists in a dictionary before accessing that key’s value. Fortunately, dictionaries have a `get()` method that takes two arguments: the key of the value to retrieve and a fallback value to return if that key does not exist.\n\nBecause there is no 'eggs' key in the `picnicItems` dictionary, the default value 0 is returned by the `get()` method. Without using `get()`, the code would have caused a `KeyError` message\n\nLists and dictionaries are values that can contain multiple values, including other lists and dictionaries. Dictionaries are useful because you can map one item (the key) to another (the value), as opposed to lists, which simply contain a series of values in order. Values inside a dictionary are accessed using square brackets just as with lists. Instead of an integer index, dictionaries can have keys of a variety of data types: integers, floats, strings, or tuples.\n","srcMarkdownNoYaml":"\n\n\n\n\n\n\n<table align=\"left\">\n  <td>\n    <a href=\"https://colab.research.google.com/github/phonchi/nsysu-math105A/blob/master/static_files/presentations/03_Basic_structure.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n  </td>\n  <td>\n    <a target=\"_blank\" href=\"https://kaggle.com/kernels/welcome?src=https://github.com/phonchi/nsysu-math105A/blob/master/static_files/presentations/03_Basic_structure.ipynb\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" /></a>\n  </td>\n</table>\n\nIn this chapter, we will cover the dictionary data type, which provides a flexible way to access and organize data.\n\nhttps://github.com/topics/python4beginner\n\nhttps://github.com/milaan9/92_Python_Games/blob/main/002_Tic_Tac_Toe_with_AI/001_Tic_Tac_Toe_with_AI.ipynb\n\nhttps://github.com/grantjenks/free-python-games\n\nhttps://github.com/asweigart/PythonStdioGames\n\n## Dictionaries\n\nA *dictionary* is like a list, but more general. In a list, the index positions have to be integers; in a dictionary, the indices can be (almost) any type.\n\nYou can think of a dictionary as a mapping between a set of indices (which are called ***keys***) and a set of ***values***. Each key maps to a value. The association of a key and a value is called a `key-value` pair or sometimes an item.\n\n<center><img src=\"https://favtutor.com/resources/images/uploads/mceu_93797887411635500429275.png\"></center>\n<div align=\"center\"> source: https://favtutor.com/blogs/list-vs-dictionary </div>\n\n> As of Python 3.7, dictionary items maintain the order at which they are inserted into the dictionary.\n\nAs an example, we’ll build a dictionary that maps from subjects to grade, so the keys are string while the values are integers. The function `dict` creates a new dictionary with no items. \n\nTo add items to the dictionary, you can use square brackets:\n\nYou can\tstore them using separate lists for\tsubjects and scores but the following update and maintain will becomes tedius\n\nYou can now use the keys to look up the corresponding values:\n\nNote that you can’t access items in them using integer indexes like `grade[0]`. (Consider the case when you use 4, 2, 1, 0 as the keys). Therefore, you can't use slice for dictionaries either. \n\nTrying to access a key that does not exist in a dictionary will result in a `KeyError` error message, much like a list’s “out-of-range” `IndexError` error message.\n\nTo add or delete an entry, it is similar to list\n\n### The `keys()`, `values()`, and `items()` Methods\n\nThere are three dictionary methods that will return list-like values of the dictionary’s keys, values, or both keys and values: `keys()`, `values()`, and `items()`. The values returned by these methods are not true lists but these data types (dict_keys, dict_values, and dict_items, respectively) can be used in for loops!\n\nHere, a `for` loop iterates over each of the values in the `grade` dictionary. A `for` loop can also iterate over the keys:\n\nIf you want to retrieve all the keys and values as a true list, you can use the `keys()` and `values()` method available in dictionary objects with `list()`\n\nDictionaries have a method called `items()` that returns a list of tuples, where each tuple is a key-value pair:\n\nCombining `items()`, multiple assignment, and `for`, you can see a nice code pattern for traversing the keys and values of a dictionary in a single loop:\n\n### > Exercise 3: Try to write a function that calculates the weighted average of the input dictionary\n\n#### Checking Whether a Key or Value Exists in a Dictionary\n\nRecall from the previous chapter that the `in` and `not in` operators can check whether a value exists in a list. You can also use these operators to see whether a certain key or value exists in a dictionary\n\nIn the previous example, notice that 'calculus' in `grade` is essentially a shorter version of writing 'calculus' in `grade.keys()`.\n\n#### The `get()` Method\n\nIt’s tedious to check whether a key exists in a dictionary before accessing that key’s value. Fortunately, dictionaries have a `get()` method that takes two arguments: the key of the value to retrieve and a fallback value to return if that key does not exist.\n\nBecause there is no 'eggs' key in the `picnicItems` dictionary, the default value 0 is returned by the `get()` method. Without using `get()`, the code would have caused a `KeyError` message\n\nLists and dictionaries are values that can contain multiple values, including other lists and dictionaries. Dictionaries are useful because you can map one item (the key) to another (the value), as opposed to lists, which simply contain a series of values in order. Values inside a dictionary are accessed using square brackets just as with lists. Instead of an integer index, dictionaries can have keys of a variety of data types: integers, floats, strings, or tuples.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"05_Dictionaries.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.306","book":{"page-navigation":true,"title":"mybook","author":"phonchi","date":"02/17/2023","chapters":["index.qmd","01_Python.ipynb","02_Flow_control.ipynb","03_Function.ipynb","04_Lists_tuples.ipynb","05_Dictionaries_sets.ipynb","06_Manipulating_string.ipynb","07_Files.ipynb"],"search":{"location":"navbar","type":"overlay"}},"theme":"cosmo","title":"Dictionaries"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}