{"title":"Python Basics","markdown":{"yaml":{"title":"Python Basics","author":"phonchi","date":"02/17/2023","format":{"html":{"toc":true,"code-line-numbers":true,"code-fold":true,"code-tools":true}}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n<table align=\"left\">\n  <td>\n    <a href=\"https://colab.research.google.com/github/phonchi/nsysu-math105A/blob/master/static_files/presentations/01_Python.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n  </td>\n  <td>\n    <a target=\"_blank\" href=\"https://kaggle.com/kernels/welcome?src=https://github.com/phonchi/nsysu-math105A/blob/master/static_files/presentations/01_Python.ipynb\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" /></a>\n  </td>\n</table>\n<br/>\n\n\nA programming language is a computer system created to allow humans to precisely express algorithms to the computer using a higher level of abstraction. Python is one of the top ten most-used languages, and remains popular in developing web applications, in scientific computation, and as an introductory language for students. Organizations that use Python \nrange from Google to NASA, DropBox to Industrial Light & Magic, and across the spectrum of casual, scientific, and artistic computer users. \n\nPython emphasizes readability, and includes elements of the imperative, object-oriented, and functional programming paradigms, which will be explored later on. Python is an ***interpreted language***, which for beginners means that Python instructions can be typed into an interactive prompt, or can be stored in a plain text file (called a `“script”`) and run later. These instructions are evaluated and the commands are executed by the Python ***interpreter*** in something called the ***shell***.\n\n### Hello, Python\n\nA ***command***, often called a ***statement***, instructs the interpreter to do something. The first program described in many programming Language introductions is “Hello, World”.  This simple program outputs a nominal greeting, demonstrating how a particular language produces a result, and also how a language represents text.\n\nThere are several aspects to note even in this simple Python statement. \n* First, \n`print()` is a built-in ***function***, a pre-defined operation that Python can use to produce *output*, a result of the program that will be made visible to the user. The print is followed by opening and closing parentheses; what comes \nbetween those parentheses is the value or ***arguments*** to be printed.\n\n* Second, fixed values such as numbers, letters, and strings, are called ***constants*** or simple data type because their value does not change. String constants use single quotes `'` or double quotes `\"` in Python. The quotation marks in front of the capital `'H'` and after the exclamation point denotes the beginning and end of a string of characters that will be treated as a value in Python.\n\nProgramming languages carry out their instructions very precisely. If a user makes subtle changes to the message between the starting and finishing quotation marks within the print statement, the resultant printed text will change accordingly. Notice that it is possible for statements to span more than one line using `\\` .\n\n> In Jupyter Notebook, the `print` function can even be omitted if the statement you want to print is the last statement in the code.\n\n#### Using string methods like a word processor\n\nOne of the simplest tasks you can do with strings is to change the case of the words in a string.\n\nIn this example, we have the lowercase string 'hi python'. The ***method*** `title()` appears after the string in the `print()` call. A method is an action that Python can perform on a piece of data. The dot (`.`) after the string tells Python to make the `title()` method act on the string. Every method is followed by a set of parentheses that can accept arguments just like a function.\n\nThere are also other useful methods for string\n\nThese example statements introduce another language feature. The `#` symbol denotes the beginning of a ***comment***, a human-readable notation to the Python code that will be ignored by the computer when executed. A high-level description at the top of a script introduces a human reader to the overall purpose and methodology used in the script. All of the characters to the right of the `#` until the end of the line are ignored by Python.\n\n> ### Exercise 1: Complete the following items to make sure you correctly set up the environment.\n1. Open the explorer on the left-hand side\n2. Connect to the Python environment\n3. Create a new code cell below and write a code snippet that prints out \"finish\". Execute the cell.\n4. Create a new script called \"finish.py\" and write a code snippet that prints out \"finish\". Execute the script.\n\n### Operators and Expressions\n\nBesides string, numbers are often used in programming. Python's built-in operators allow numeric values to be manipulated and combined in a variety of familiar ways. Note that in Python, `2 + 3` is called an ***expression***, which consists of values/operands (such as `2` or `3`) and operators (such as `+`), and they are special statements! An expression is a combination of operators and operands that is interpreted to produce some other value.\n\n#### Using operand like a calculator\n\n> Note that  we used `**` to signify exponentiation, which can be somewhat surprising given that the caret symbol, `^`, is often used for this purpose in some other programming languages. In Python, the caret operator belongs to XOR bitwise Boolean operations.\n\nWhen an operation such as forty-five divided by four produces a non-integer result, such as `11.25`, Python implicitly switches to a floating-point representation. When purely integer answers are desired, a different set of operators can be used.\n\nThe double slash signifies the integer floor division operator, while the percentage symbol signifies the modulus, or remainder operator. Taken together, we can read  these  calculations as, “Four goes into forty-five eleven times, with a remainder of one.” \n\nString values also can be combined and manipulated in some intuitive ways.\n\nThe plus operator ***concatenates*** string values, while the multiplication  operator ***replicates*** string values.\n\n## Variables\n\nA ***variable*** is like a box in the computer’s memory where you can store value. If you want to use the result of an evaluated expression later in your program, you can save it inside a variable. You’ll store values in variables with an ***assignment statement***. An assignment statement consists of a variable name, an equal sign, and the value to be stored. **In Python, every single thing is stored as an object. A Python variable is actually a reference to an object!**\n\n<center><img src=\"https://runestone.academy/ns/books/published/cpp4python/_images/python_reference.png\"></center>\n<div align=\"center\"> source: https://runestone.academy/ns/books/published/cpp4python/AtomicData/AtomicData.html </div>\n\nA variable is initialized (or created) the first time a value is stored in it. After that, you can use it in statements with other variables and values. When a variable is assigned a new value, the old value is forgotten. This is called **overwriting** the variable.\n\n> It’s much better to think of variables as labels that you can assign to values. [You can also say that a variable ***references*** a certain value](https://pythontutor.com/visualize.html#code=spam%20%3D%20'Hello'%20%20%20%23%20'Hello'%20is%20a%20string%20object%0Aprint%28spam%29%20%20%20%20%20%20%23%20spam%20is%20a%20variable,%20it%20is%20just%20a%20reference%20or%20tag%0Aspam%20%3D%20'Goodbye'%20%23%20'Goodbye'%20is%20another%20string%20object%0Aprint%28spam%29&cumulative=false&curInstr=0&heapPrimitives=true&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false).\n\nThe naming of variables is largely up to the user in Python. Python's simple rules are that variable names must begin with an alphabet letter or the underscore character, and may consist of an arbitrary number of letters, digits, and the underscore character (A-z, 0-9, and _ ). While a variable named `m` may be sufficient for a two line example script, experienced programmers strive to give meaningful, descriptive variable names in their scripts.\n\n| Valid variable names | Invalid variable names                                |\n|----------------------|-------------------------------------------------------|\n| current_balance      | current-balance (hyphens are not allowed)             |\n| currentBalance       | current balance (spaces are not allowed)              |\n| account4             | 4account (can’t begin with a number)                  |\n| _42                  | 42 (can’t begin with a number)                        |\n| TOTAL_SUM            | TOTAL_$UM (special characters like $ are not allowed) |\n| hello                | 'hello' (special characters like ' are not allowed)   |\n\nPython variable names are ***case-sensitive***, meaning that capitalization matters. A variable named `size` is treated as distinct from variables named `Size` or `SIZE`. A small number of ***keywords***, names that are reserved for special meaning in Python, cannot be used as variable names. You can view this list by accessing the built-in Python help system.\n\nVariables can be used to store all of the types of data values that Python is \nable to represent.\n\nNote that when you’re writing long numbers, you can group digits using underscores to make large numbers more readable. In addition, `print()` can be used to print any numerical number including those in scientific notation.\n\n### Data types\n\nIn Python variables and constants have a ***type***. We can ask Python what type something is by using the `type()` function\n\nYou can convert object of one type to another using ***cast*** by `str()`, `float()`, `int()`, etc.\n\nPython `ord()` and `chr()` are built-in functions. They are used to convert a character to an int and vice versa. Python `ord()` and `chr()` functions are exactly opposite of each other. \n\nPython `ord()` function takes string argument of a single Unicode character and return its integer Unicode code point value. Let’s look at some examples of using `ord()` function.\n\nPython `chr()` function takes integer argument and return the string representing a character at that code point.\n\n#### Conversion\n\nThere are two types of type conversion in Python.\n\n- Implicit Conversion - automatic type conversion. Python always converts smaller data types to larger data types to avoid the loss of data.\n- Explicit Conversion - manual type conversion\n\nIn Python, `complex > float > int > bool`\n\n### Debugging\n\nProgramming languages are not very forgiving for beginners, and a great deal of time learning to write software can be spent trying to find bugs, or errors in \nthe code. Locating such bugs and correcting them is thus known as ***debugging***. There are three major classes of bug that we create in software: ***syntax errors*** (mistakes in the symbols that have been typed), ***semantic errors*** (mistakes in the meaning of the program), and ***runtime errors*** (mistakes that occur when the program is executed.) \n\nSyntax errors are the most common for novices, and include simple errors \nsuch as forgetting one of the quote marks at the beginning or ending of a text \nstring, failing to close open parentheses, or misspelling the function name \n`print()`. The Python interpreter will generally try to point these errors out \nwhen it encounters them, displaying an offending line number and a description of the problem. With some practice, a beginner can quickly learn to recognize and interpret common error cases. As examples:\n\nThis expression is missing a value between the addition operator and the \nclosing parenthesis.\n\nIn this case it found a name error and reports that the variable being printed has not been defined. \nPython can’t identify the variable name provided.\n\nLike calling someone by the wrong name, misspelling the name of a known \nfunction or variable can result in confusion and embarrassment.\n\nSemantic errors are flaws in the algorithm, or flaws in the way the algorithm is expressed in a language. Examples might include using the wrong \nvariable name in a calculation, or getting the order of arithmetic operations \nwrong in a complex expression. Python follows the standard rules for operator precedence, so in an expression like `total_pay = 40 + extra_hours * pay_rate`, the multiplication will be performed before the addition, incorrectly \ncalculating the total pay. (Unless your pay rate happens to be $1/hour.) **Use \nparenthesis to properly specify the order of operations in complex expressions**, thereby avoiding both semantic errors and code that may be harder to understand (e.g., `total_pay = (40 + extra_hours) * pay_rate`).\n\nFinally, runtime errors at this level might include unintentionally dividing \nby zero or using a variable before you have defined it. Python reads statements from top to bottom, and it must see an assignment statement to a variable before that variable is used in an expression.\n\n## The first program\n\nWhile the interactive shell is good for running Python instructions one at a time, sometimes you have to use a ***script***, to write entire Python programs. In this case, you’ll type the instructions into the file editor. \n\nOnce you’ve entered your source code, the ipython **magic** `%%writefile` will save it so that you won’t have to retype it each time you start. You can then use another magic `%run` to execute the python script. \n\n### Dissecting Your Program\n\nWith your new program open in the file editor, let’s take a quick tour of the Python instructions it uses by looking at what each line of code does.\n\n1. The first line is the comment that tells others your intention of this program or the authorship of the program. Here it uses the ***multiline comment*** by using the triple quotes. The line `print('Hello, world!')` means “Print out the text in the string 'Hello, world!'.” When Python executes this line, you say that Python is calling the `print()` ***function*** and the string value is being passed to the function. A value that is passed to a function call is an ***argument***. When you write a function name, the opening and closing parentheses at the end identify it as the name of a function.\n\n2. The `input()` function waits for the user to type some text on the keyboard and press ENTER. The `myName = input()` function call evaluates to a string equal to the user’s text, and the line of code assigns the `myName` variable to this string value.\n\n3. The following call to `print('It is good to meet you, ' + myName)` is an expression. `'It is good to meet you, '` and `myName` between the parentheses are concatenated together via the operand `+` and printed out.\n\n4. You can pass the `len()` function a string value (or a variable containing a string), and the function evaluates to the integer value of the number of characters in that string. If you want to concatenate an integer such as 29 with a string to pass to `print()`, you’ll need to get the value '29', which is the string form of 29. The `str()` function can be passed an integer value and will evaluate to a string value version of the integer. Besides, there is a `\\n` in the statement `print('The length of your name is:\\n' + str(len(myName)))`. The string starts with the backslash has a special escape meaning and `\\n` means adding a newline.\n\n5. The `int()` function is also helpful if you have a number as a string value that you want to use in some mathematics. For example, the `input()` function always returns a string, even if the user enters a number. The `myAge` variable contains the value returned from `input()`. You can use the `int(myAge)` code to return an integer value of the string in `myAge`. This integer value is then added to 1 in the expression `int(myAge) + 1`. The result of this addition is passed to the `str()` function: `str(int(myAge) + 1)`. The string value returned is then concatenated with the strings `'You will be '` and `' in a year.'` to evaluate one large string value. This large string is finally passed to `print()` to be displayed on the screen.\n\n> ### Exercise 2:  Write a script that inputs a five-digit integer from the user. Separate the number into its individual digits. Print them separated by three spaces each. For example, if the user types in the number 42339, the script should print 4 $~~$ 2 $~~$ 3 $~~$ 3 $~~$ 9\n\nHint: Use floor division (`//`) and remainder (`%`) to isolate the digits.  \n\n## The zen of Python\n\nYou can compute expressions with a calculator or enter string concatenations with a word processor. You can even do string replication easily by copying and pasting text. But once you know how to handle the programing elements, you will be able to instruct Python to operate on large amounts of data automatically for you to replace these tasks.\n\nDon’t try to write perfect code; write code that works, and then decide whether to improve your code for that project or move on to something new. But as you continue to the next chapters and start digging into more involved topics, try to keep this philosophy of **simplicity** and **clarity** in mind. \n\n> You can also refer [PEP8](https://peps.python.org/pep-0008/) which is a reference document that provides guidelines and best practices on how to write Python code.\n","srcMarkdownNoYaml":"\n\n<table align=\"left\">\n  <td>\n    <a href=\"https://colab.research.google.com/github/phonchi/nsysu-math105A/blob/master/static_files/presentations/01_Python.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n  </td>\n  <td>\n    <a target=\"_blank\" href=\"https://kaggle.com/kernels/welcome?src=https://github.com/phonchi/nsysu-math105A/blob/master/static_files/presentations/01_Python.ipynb\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" /></a>\n  </td>\n</table>\n<br/>\n\n## Introduction\n\nA programming language is a computer system created to allow humans to precisely express algorithms to the computer using a higher level of abstraction. Python is one of the top ten most-used languages, and remains popular in developing web applications, in scientific computation, and as an introductory language for students. Organizations that use Python \nrange from Google to NASA, DropBox to Industrial Light & Magic, and across the spectrum of casual, scientific, and artistic computer users. \n\nPython emphasizes readability, and includes elements of the imperative, object-oriented, and functional programming paradigms, which will be explored later on. Python is an ***interpreted language***, which for beginners means that Python instructions can be typed into an interactive prompt, or can be stored in a plain text file (called a `“script”`) and run later. These instructions are evaluated and the commands are executed by the Python ***interpreter*** in something called the ***shell***.\n\n### Hello, Python\n\nA ***command***, often called a ***statement***, instructs the interpreter to do something. The first program described in many programming Language introductions is “Hello, World”.  This simple program outputs a nominal greeting, demonstrating how a particular language produces a result, and also how a language represents text.\n\nThere are several aspects to note even in this simple Python statement. \n* First, \n`print()` is a built-in ***function***, a pre-defined operation that Python can use to produce *output*, a result of the program that will be made visible to the user. The print is followed by opening and closing parentheses; what comes \nbetween those parentheses is the value or ***arguments*** to be printed.\n\n* Second, fixed values such as numbers, letters, and strings, are called ***constants*** or simple data type because their value does not change. String constants use single quotes `'` or double quotes `\"` in Python. The quotation marks in front of the capital `'H'` and after the exclamation point denotes the beginning and end of a string of characters that will be treated as a value in Python.\n\nProgramming languages carry out their instructions very precisely. If a user makes subtle changes to the message between the starting and finishing quotation marks within the print statement, the resultant printed text will change accordingly. Notice that it is possible for statements to span more than one line using `\\` .\n\n> In Jupyter Notebook, the `print` function can even be omitted if the statement you want to print is the last statement in the code.\n\n#### Using string methods like a word processor\n\nOne of the simplest tasks you can do with strings is to change the case of the words in a string.\n\nIn this example, we have the lowercase string 'hi python'. The ***method*** `title()` appears after the string in the `print()` call. A method is an action that Python can perform on a piece of data. The dot (`.`) after the string tells Python to make the `title()` method act on the string. Every method is followed by a set of parentheses that can accept arguments just like a function.\n\nThere are also other useful methods for string\n\nThese example statements introduce another language feature. The `#` symbol denotes the beginning of a ***comment***, a human-readable notation to the Python code that will be ignored by the computer when executed. A high-level description at the top of a script introduces a human reader to the overall purpose and methodology used in the script. All of the characters to the right of the `#` until the end of the line are ignored by Python.\n\n> ### Exercise 1: Complete the following items to make sure you correctly set up the environment.\n1. Open the explorer on the left-hand side\n2. Connect to the Python environment\n3. Create a new code cell below and write a code snippet that prints out \"finish\". Execute the cell.\n4. Create a new script called \"finish.py\" and write a code snippet that prints out \"finish\". Execute the script.\n\n### Operators and Expressions\n\nBesides string, numbers are often used in programming. Python's built-in operators allow numeric values to be manipulated and combined in a variety of familiar ways. Note that in Python, `2 + 3` is called an ***expression***, which consists of values/operands (such as `2` or `3`) and operators (such as `+`), and they are special statements! An expression is a combination of operators and operands that is interpreted to produce some other value.\n\n#### Using operand like a calculator\n\n> Note that  we used `**` to signify exponentiation, which can be somewhat surprising given that the caret symbol, `^`, is often used for this purpose in some other programming languages. In Python, the caret operator belongs to XOR bitwise Boolean operations.\n\nWhen an operation such as forty-five divided by four produces a non-integer result, such as `11.25`, Python implicitly switches to a floating-point representation. When purely integer answers are desired, a different set of operators can be used.\n\nThe double slash signifies the integer floor division operator, while the percentage symbol signifies the modulus, or remainder operator. Taken together, we can read  these  calculations as, “Four goes into forty-five eleven times, with a remainder of one.” \n\nString values also can be combined and manipulated in some intuitive ways.\n\nThe plus operator ***concatenates*** string values, while the multiplication  operator ***replicates*** string values.\n\n## Variables\n\nA ***variable*** is like a box in the computer’s memory where you can store value. If you want to use the result of an evaluated expression later in your program, you can save it inside a variable. You’ll store values in variables with an ***assignment statement***. An assignment statement consists of a variable name, an equal sign, and the value to be stored. **In Python, every single thing is stored as an object. A Python variable is actually a reference to an object!**\n\n<center><img src=\"https://runestone.academy/ns/books/published/cpp4python/_images/python_reference.png\"></center>\n<div align=\"center\"> source: https://runestone.academy/ns/books/published/cpp4python/AtomicData/AtomicData.html </div>\n\nA variable is initialized (or created) the first time a value is stored in it. After that, you can use it in statements with other variables and values. When a variable is assigned a new value, the old value is forgotten. This is called **overwriting** the variable.\n\n> It’s much better to think of variables as labels that you can assign to values. [You can also say that a variable ***references*** a certain value](https://pythontutor.com/visualize.html#code=spam%20%3D%20'Hello'%20%20%20%23%20'Hello'%20is%20a%20string%20object%0Aprint%28spam%29%20%20%20%20%20%20%23%20spam%20is%20a%20variable,%20it%20is%20just%20a%20reference%20or%20tag%0Aspam%20%3D%20'Goodbye'%20%23%20'Goodbye'%20is%20another%20string%20object%0Aprint%28spam%29&cumulative=false&curInstr=0&heapPrimitives=true&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false).\n\nThe naming of variables is largely up to the user in Python. Python's simple rules are that variable names must begin with an alphabet letter or the underscore character, and may consist of an arbitrary number of letters, digits, and the underscore character (A-z, 0-9, and _ ). While a variable named `m` may be sufficient for a two line example script, experienced programmers strive to give meaningful, descriptive variable names in their scripts.\n\n| Valid variable names | Invalid variable names                                |\n|----------------------|-------------------------------------------------------|\n| current_balance      | current-balance (hyphens are not allowed)             |\n| currentBalance       | current balance (spaces are not allowed)              |\n| account4             | 4account (can’t begin with a number)                  |\n| _42                  | 42 (can’t begin with a number)                        |\n| TOTAL_SUM            | TOTAL_$UM (special characters like $ are not allowed) |\n| hello                | 'hello' (special characters like ' are not allowed)   |\n\nPython variable names are ***case-sensitive***, meaning that capitalization matters. A variable named `size` is treated as distinct from variables named `Size` or `SIZE`. A small number of ***keywords***, names that are reserved for special meaning in Python, cannot be used as variable names. You can view this list by accessing the built-in Python help system.\n\nVariables can be used to store all of the types of data values that Python is \nable to represent.\n\nNote that when you’re writing long numbers, you can group digits using underscores to make large numbers more readable. In addition, `print()` can be used to print any numerical number including those in scientific notation.\n\n### Data types\n\nIn Python variables and constants have a ***type***. We can ask Python what type something is by using the `type()` function\n\nYou can convert object of one type to another using ***cast*** by `str()`, `float()`, `int()`, etc.\n\nPython `ord()` and `chr()` are built-in functions. They are used to convert a character to an int and vice versa. Python `ord()` and `chr()` functions are exactly opposite of each other. \n\nPython `ord()` function takes string argument of a single Unicode character and return its integer Unicode code point value. Let’s look at some examples of using `ord()` function.\n\nPython `chr()` function takes integer argument and return the string representing a character at that code point.\n\n#### Conversion\n\nThere are two types of type conversion in Python.\n\n- Implicit Conversion - automatic type conversion. Python always converts smaller data types to larger data types to avoid the loss of data.\n- Explicit Conversion - manual type conversion\n\nIn Python, `complex > float > int > bool`\n\n### Debugging\n\nProgramming languages are not very forgiving for beginners, and a great deal of time learning to write software can be spent trying to find bugs, or errors in \nthe code. Locating such bugs and correcting them is thus known as ***debugging***. There are three major classes of bug that we create in software: ***syntax errors*** (mistakes in the symbols that have been typed), ***semantic errors*** (mistakes in the meaning of the program), and ***runtime errors*** (mistakes that occur when the program is executed.) \n\nSyntax errors are the most common for novices, and include simple errors \nsuch as forgetting one of the quote marks at the beginning or ending of a text \nstring, failing to close open parentheses, or misspelling the function name \n`print()`. The Python interpreter will generally try to point these errors out \nwhen it encounters them, displaying an offending line number and a description of the problem. With some practice, a beginner can quickly learn to recognize and interpret common error cases. As examples:\n\nThis expression is missing a value between the addition operator and the \nclosing parenthesis.\n\nIn this case it found a name error and reports that the variable being printed has not been defined. \nPython can’t identify the variable name provided.\n\nLike calling someone by the wrong name, misspelling the name of a known \nfunction or variable can result in confusion and embarrassment.\n\nSemantic errors are flaws in the algorithm, or flaws in the way the algorithm is expressed in a language. Examples might include using the wrong \nvariable name in a calculation, or getting the order of arithmetic operations \nwrong in a complex expression. Python follows the standard rules for operator precedence, so in an expression like `total_pay = 40 + extra_hours * pay_rate`, the multiplication will be performed before the addition, incorrectly \ncalculating the total pay. (Unless your pay rate happens to be $1/hour.) **Use \nparenthesis to properly specify the order of operations in complex expressions**, thereby avoiding both semantic errors and code that may be harder to understand (e.g., `total_pay = (40 + extra_hours) * pay_rate`).\n\nFinally, runtime errors at this level might include unintentionally dividing \nby zero or using a variable before you have defined it. Python reads statements from top to bottom, and it must see an assignment statement to a variable before that variable is used in an expression.\n\n## The first program\n\nWhile the interactive shell is good for running Python instructions one at a time, sometimes you have to use a ***script***, to write entire Python programs. In this case, you’ll type the instructions into the file editor. \n\nOnce you’ve entered your source code, the ipython **magic** `%%writefile` will save it so that you won’t have to retype it each time you start. You can then use another magic `%run` to execute the python script. \n\n### Dissecting Your Program\n\nWith your new program open in the file editor, let’s take a quick tour of the Python instructions it uses by looking at what each line of code does.\n\n1. The first line is the comment that tells others your intention of this program or the authorship of the program. Here it uses the ***multiline comment*** by using the triple quotes. The line `print('Hello, world!')` means “Print out the text in the string 'Hello, world!'.” When Python executes this line, you say that Python is calling the `print()` ***function*** and the string value is being passed to the function. A value that is passed to a function call is an ***argument***. When you write a function name, the opening and closing parentheses at the end identify it as the name of a function.\n\n2. The `input()` function waits for the user to type some text on the keyboard and press ENTER. The `myName = input()` function call evaluates to a string equal to the user’s text, and the line of code assigns the `myName` variable to this string value.\n\n3. The following call to `print('It is good to meet you, ' + myName)` is an expression. `'It is good to meet you, '` and `myName` between the parentheses are concatenated together via the operand `+` and printed out.\n\n4. You can pass the `len()` function a string value (or a variable containing a string), and the function evaluates to the integer value of the number of characters in that string. If you want to concatenate an integer such as 29 with a string to pass to `print()`, you’ll need to get the value '29', which is the string form of 29. The `str()` function can be passed an integer value and will evaluate to a string value version of the integer. Besides, there is a `\\n` in the statement `print('The length of your name is:\\n' + str(len(myName)))`. The string starts with the backslash has a special escape meaning and `\\n` means adding a newline.\n\n5. The `int()` function is also helpful if you have a number as a string value that you want to use in some mathematics. For example, the `input()` function always returns a string, even if the user enters a number. The `myAge` variable contains the value returned from `input()`. You can use the `int(myAge)` code to return an integer value of the string in `myAge`. This integer value is then added to 1 in the expression `int(myAge) + 1`. The result of this addition is passed to the `str()` function: `str(int(myAge) + 1)`. The string value returned is then concatenated with the strings `'You will be '` and `' in a year.'` to evaluate one large string value. This large string is finally passed to `print()` to be displayed on the screen.\n\n> ### Exercise 2:  Write a script that inputs a five-digit integer from the user. Separate the number into its individual digits. Print them separated by three spaces each. For example, if the user types in the number 42339, the script should print 4 $~~$ 2 $~~$ 3 $~~$ 3 $~~$ 9\n\nHint: Use floor division (`//`) and remainder (`%`) to isolate the digits.  \n\n## The zen of Python\n\nYou can compute expressions with a calculator or enter string concatenations with a word processor. You can even do string replication easily by copying and pasting text. But once you know how to handle the programing elements, you will be able to instruct Python to operate on large amounts of data automatically for you to replace these tasks.\n\nDon’t try to write perfect code; write code that works, and then decide whether to improve your code for that project or move on to something new. But as you continue to the next chapters and start digging into more involved topics, try to keep this philosophy of **simplicity** and **clarity** in mind. \n\n> You can also refer [PEP8](https://peps.python.org/pep-0008/) which is a reference document that provides guidelines and best practices on how to write Python code.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"01_Python.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.306","book":{"page-navigation":true,"title":"mybook","author":"phonchi","date":"02/17/2023","chapters":["index.qmd","01_Python.ipynb","02_Flow_control.ipynb","03_Function.ipynb","04_Lists_tuples.ipynb","05_Dictionaries_sets.ipynb","06_Manipulating_string.ipynb","07_Files.ipynb"],"search":{"location":"navbar","type":"overlay"}},"theme":"cosmo","title":"Python Basics","author":"phonchi","date":"02/17/2023"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}